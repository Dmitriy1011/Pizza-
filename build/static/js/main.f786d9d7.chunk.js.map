{"version":3,"sources":["redux/actions/pizzas.js","components/Button.jsx","Assets/img/pizza-logo.svg","components/Header.jsx","components/Categories.jsx","components/SortPopup.jsx","components/PizzaBlock.jsx","pages/Home.jsx","redux/actions/filters.js","pages/Cart.jsx","App.js","redux/reducers/filters.js","redux/reducers/pizzas.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["setPizzas","items","type","payload","Button","onClick","className","outline","children","classNames","Header","to","width","src","logoSvg","alt","height","viewBox","fill","xmlns","d","stroke","strokewith","strokeLinecap","strokeLinejoin","Categories","React","memo","onClickItem","useState","activeItem","setActiveItem","onSelectItem","index","map","name","key","SortPopup","visiblePopup","setVisiblePopup","sortRef","useRef","activeLabel","handleOutsideClick","e","path","includes","current","useEffect","document","body","addEventListener","console","log","ref","obj","PizzaBlock","imageUrl","price","types","sizes","activeType","setActiveType","activeSize","setActiveSize","onSelectType","size","onSelectSize","defaultProps","categoryNames","sortItems","Home","dispatch","useDispatch","useSelector","pizzas","onSelectCategory","useCallback","id","Cart","App","axios","get","then","data","component","exact","initialState","categories","sortBy","filters","state","action","category","isLoaded","rootReducer","combineReducers","filtersReducer","pizzasReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","subscribe","getState","ReactDOM","render","getElementById"],"mappings":"iMAcaA,EAAY,SAACC,GAAD,MAAY,CACjCC,KAAM,aACNC,QAASF,I,iBCoBEG,MAhCf,YAA2D,IAAzCC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SAM3C,OAOE,4BAAQH,QAASA,EACjBC,UAAWG,IAAW,SAAUH,EAAW,CACjC,kBAAoBC,KAEnBC,I,QCrBF,MAA0B,uCCkE1BE,MA7Df,WACI,OACI,yBAAKJ,UAAU,UACf,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMK,GAAK,KACX,yBAAKL,UAAU,gBACb,yBAAKM,MAAM,KAAKC,IAAKC,EAASC,IAAI,eAClC,6BAEE,2CACA,8MAKJ,yBAAKT,UAAU,gBACb,kBAAC,IAAD,CAAMK,GAAG,SACT,kBAAC,EAAD,CAAQL,UAAU,gBAClB,4CACE,yBAAKA,UAAU,sBACf,yBACEM,MAAM,KACNI,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACEC,EAAE,wLACFC,OAAO,QACPC,WAAW,MACXC,cAAc,QACdC,eAAe,UAEjB,0BACEJ,EAAE,yLACFC,OAAO,QACPC,WAAW,MACXC,cAAc,QACdC,eAAe,UAEjB,0BACEJ,EAAE,sWACFC,OAAO,QACPC,WAAW,MACXC,cAAc,QACdC,eAAe,WAGnB,yC,OCiBCC,EAjCIC,IAAMC,MAAK,YAA2C,IAAtB1B,EAAqB,EAArBA,MAAO2B,EAAc,EAAdA,YAAc,EAElCF,IAAMG,SAAS,MAFmB,mBAE/DC,EAF+D,KAEnDC,EAFmD,KAIhEC,EAAe,SAACC,GACpBF,EAAcE,GACdL,EAAYK,IAQd,OACI,6BACI,yBAAK3B,UAAU,cACb,4BACE,wBAAIA,UAA4B,OAAfwB,EAAsB,SAAW,GAAIzB,QAAS,kBAAI2B,EAAa,QAAhF,sBAEI/B,GAASA,EAAMiC,KAAI,SAACC,EAAMF,GAAP,OACnB,wBAAI3B,UAAawB,IAAeG,EAAQ,SAAW,GACnD5B,QAAS,kBAAK2B,EAAaC,IAC3BG,IAAG,UAAKD,EAAL,cACFA,YCsBJE,EAlFGX,IAAMC,MAAK,YAA6B,IAAT1B,EAAQ,EAARA,MAAQ,EAEfyB,IAAMG,UAAS,GAFA,mBAEhDS,EAFgD,KAElCC,EAFkC,KAKjDC,EAAUd,IAAMe,SALiC,EAUnBf,IAAMG,SAAS,GAVI,mBAUhDC,EAVgD,KAUpCC,EAVoC,KAYjDW,EAAczC,EAAM6B,GAAYK,KAQhCQ,EAAqB,SAACC,GACnBA,EAAEC,KAAKC,SAASN,EAAQO,UAC7BR,GAAgB,IAuBpB,OAZAb,IAAMsB,WAAU,WACZC,SAASC,KAAKC,iBAAiB,QAASR,GACxCS,QAAQC,IAAIb,EAAQO,WACrB,IAUC,yBAAKO,IAAKd,EAASlC,UAAU,QACvB,yBAAKA,UAAU,eACb,yBACEM,MAAM,KACNI,OAAO,IACPC,QAAQ,WACRC,KAAK,OACLC,MAAM,8BAEN,0BACEC,EAAE,4WACFF,KAAK,aAGT,yGACA,0BAAMb,QA/CS,WACvBkC,GAAiBD,KA8C2BI,IAErCJ,GACE,yBAAKhC,UAAU,eAChB,4BACEL,GACEA,EAAMiC,KAAI,SAACqB,EAAKtB,GAAN,OACV,wBACA5B,QAAS,kBAzCJ,SAAC4B,GAClBF,EAAcE,GACdM,GAAgB,GAuCWP,CAAaC,IAC5B3B,UAAawB,IAAeG,EAAQ,SAAW,GAC/CG,IAAG,UAAKmB,EAAIrD,KAAT,cACFqD,EAAIpB,eCtEvB,SAASqB,EAAT,GAA4D,IAAvCrB,EAAsC,EAAtCA,KAAMsB,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAE/CR,QAAQC,IAAIlB,EAAMwB,GAElB,IAJuD,EAQnBjC,IAAMG,SAAS8B,EAAM,IARF,mBAQhDE,EARgD,KAQpCC,EARoC,OASnBpC,IAAMG,SAAS+B,EAAM,IATF,mBAShDG,EATgD,KASpCC,EAToC,KAmBvD,OAEI,yBAAK1D,UAAU,eACvB,yBACAA,UAAU,qBACVO,IAAK4C,EACL1C,IAAI,UAEJ,wBAAIT,UAAU,sBAAsB6B,GACpC,yBAAK7B,UAAU,yBACf,4BAzB2B,CAAC,uCAAU,4EA0BpB4B,KAAI,SAAChC,EAAM+B,GAAP,OACtB,wBACEG,IAAKlC,EACLG,QAAU,kBAtBa,SAAC4B,GACpB6B,EAAc7B,GAqBJgC,CAAahC,IAC3B3B,UAAWG,IAAW,CACpB,OAAUoD,IAAe5B,EACzB,UAAa0B,EAAMb,SAASb,MAE1B/B,OAIN,4BApC2B,CAAC,GAAG,GAAG,IAqClBgC,KAAI,SAACgC,EAAMjC,GAAP,OACpB,wBACEG,IAAK8B,EACL7D,QAAU,kBA/Ba,SAAC4B,GACpB+B,EAAc/B,GA8BJkC,CAAalC,IAC3B3B,UAAWG,IAAW,CACpB,OAAUsD,IAAe9B,EACzB,UAAa2B,EAAMd,SAASoB,MAE1BA,EAPN,uBAYA,yBAAK5D,UAAU,uBACf,yBAAKA,UAAU,sBAAf,gBAAwCoD,EAAxC,WACA,yBAAKpD,UAAU,sCACf,yBACCM,MAAM,KACNI,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACEC,EAAE,2QACFF,KAAK,WAGR,kFACA,mCAgBAsC,EAAWY,aAAe,CACxBjC,KAAM,MACNuB,MAAO,EACPC,MAAO,GACPC,MAAO,IAGMJ,QC7FTa,EAAgB,CAAC,uCAAU,uFAAkB,iCAAS,wCACtDC,EAAY,CAChB,CAACnC,KAAK,2EAAgBjC,KAAM,WAC5B,CAACiC,KAAK,2BAAQjC,KAAM,SACpB,CAACiC,KAAK,6CAAWjC,KAAK,aAgDTqE,MA5Cf,WACE,IAAMC,EAAWC,cACXxE,EAAQyE,aAAY,qBAAGC,OAAmB1E,SAE1C2E,EAAmBlD,IAAMmD,aAAY,SAAC5C,GAC1CuC,ECZsC,CACtCtE,KAAM,eACNC,QDUqB8B,MACpB,IAWD,OACE,6BACA,yBAAK3B,UAAU,aAClB,yBAAKA,UAAU,gBACd,kBAAC,EAAD,CACKsB,YAAagD,EACb3E,MAASoE,IACb,kBAAC,EAAD,CAAWpE,MACJqE,KAGT,wBAAIhE,UAAU,kBAAd,qDACA,yBAAKA,UAAU,kBAEXL,GAASA,EAAMiC,KAAI,SAACqB,GAAD,OACnB,kBAAC,EAAD,eAAYnB,IAAOmB,EAAIuB,IAAQvB,WEpCvBwB,MARf,WACI,OACI,6BACI,4E,OC8BGC,MAzBf,WAEE,IAAMR,EAAWC,cAOjB,OALA/C,IAAMsB,WAAU,WACVwB,GVZyB,SAAAA,GAC7BS,IAAMC,IAAI,gCAAgCC,MAAK,YAAY,IAAVC,EAAS,EAATA,KACzCZ,EAASxE,EAAUoF,YUWxB,IAIH,6BACE,yBAAK9E,UAAU,WAChB,kBAAC,EAAD,MAGA,yBAAKA,UAAU,WACjB,kBAAC,IAAD,CAAOuC,KAAK,IAAIwC,UAAWd,EAAMe,OAAK,IAClC,kBAAC,IAAD,CAAOzC,KAAK,QAAQwC,UAAWN,EAAMO,OAAK,Q,uBCzB3CC,EAAe,CACjBC,WAAY,EACZC,OAAQ,WAsBGC,EAlBC,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAE9C,MAAoB,gBAAhBA,EAAO1F,KACA,2BACAyF,GADP,IAEIF,OAAQG,EAAOzF,UAGH,iBAAhByF,EAAO1F,KACJ,2BACAyF,GADP,IAEIE,SAAUD,EAAOzF,UAGlBwF,GCtBDJ,EAAe,CACjBtF,MAAO,GACP6F,UAAU,GAgBCnB,EAZA,WAAmC,IAAlCgB,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAE7C,MAAoB,eAAhBA,EAAO1F,KACA,2BACAyF,GADP,IAEI1F,MAAO2F,EAAOzF,QACd2F,UAAU,IAGXH,GCLII,EALKC,YAAgB,CAChCN,QAASO,EACTtB,OAAQuB,ICFNC,EAAmBC,OAAOC,sCAAwCC,IASzDC,EAPDC,YACVT,EACAI,EAAiBJ,EAAaI,EAAiBM,YAAgBC,QCMnEH,EAAMI,WAAU,WACdvD,QAAQC,IAAI,WAAYkD,EAAMK,eAGhCC,IAASC,OACL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACjB,4BAAQlG,QAbF,WACVkG,EAAM/B,SAAS,CACbtE,KAAK,UAWH,MACF,kBAAC,EAAD,QAOF+C,SAAS8D,eAAe,SAG1B3D,QAAQC,IAAIkD,EAAMK,c","file":"static/js/main.f786d9d7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//метод FETCHPIZZAS нужен для получения и сохранения пицц\r\nexport const fetchPizzas = () => dispatch => { //fetch(дай что-то) - обращение к серверу\r\n    axios.get('http://localhost:3001/pizzas').then(({data})=> { // ->отправь на сервер этот запрос. Когда эти данные будут получены ->\r\n            dispatch(setPizzas(data)); // -> выполни эту функцию и вызови dispath. Dispatch должен получать setPizzas(объект)\r\n                                                 //далее функция получает все пиццы, создаёт объект и этот объект передаёт в dispath, который передаёт это в redux\r\n});\r\n};\r\n\r\n// axios.get('http://localhost:3003/db.json').then(({data})=> { - выполнение get запроса\r\n// dispatch(setPizzas(data)); - сохранение в redux\r\n//благодаря библиотеке REDUX-THUNK мы можем дождаться выполнения get запроса, а потом сохранить что-то в redux\r\n\r\nexport const setPizzas = (items) => ({  //функция action-creator - функция, которая возвращает объект. Функция принимает динамические данные и прокидывает их в параметры\r\n    type: 'SET_PIZZAS',          //мы говорим, что Функция setPizzas должна взять массив пицц и создать объект\r\n    payload: items,              //этот объект будет type: SET_PIZZAS и получать payload с массивом\r\n });   \r\n \r\n//МЕТОД SETPIZZAS нужен только для сохранения пицц\r\n\r\n\r\n\r\n\r\n//  const setPizzas = ({  //это просто Action\r\n//     type: 'SET_PIZZAS',          \r\n//     payload: items,              \r\n//  });   \r\n\r\n\r\n\r\n//  const setCategory = (catIndex) => ({  //функция action-creator\r\n//      type: 'SET_CATEGORY',\r\n//      payload: catIndex,\r\n//   });  ","import React from 'react';\r\nimport classNames from 'classnames'\r\n//если компонент содержит только то, что вернется в верстке, то лучше использовать функциональный компонент\r\n\r\nfunction Button({ onClick, className, outline, children}) {  //в классах нет return\r\n    \r\n    // componentDidMount() { //этот метод позволяет узнать, когда компонент (например, Button) внедрится в нашу верстку\r\n    //     console.log('Компонент кнопка отобразился');\r\n    // }\r\n\r\n    return (\r\n    // componentDidUpdate() { //метод говорит о том, что в компоненте произошло какое-то действие(обновление)\r\n\r\n    // }\r\n\r\n     //метод, который возвращает нам то, что мы должны увидеть в итоге на экране(в верстке)\r\n        \r\n      <button onClick={onClick} \r\n      className={classNames('button', className, {\r\n                'button--outline' : outline,\r\n            })}>\r\n                {children}\r\n            </button> //this - это обращение к классу\r\n    )\r\n\r\n}    //{`button ${this.props.outline ? 'button--outline' : ''}`}>{this.props.children}</button>\r\n\r\n/*\r\n//PROPS - это свойства(аргументы)\r\n        function hello(a, b) {\r\n            return a + b\r\n        }\r\n        \r\nhello(1,2)\r\n*/\r\n\r\nexport default Button;\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/pizza-logo.56ac8703.svg\";","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport logoSvg from '../Assets/img/pizza-logo.svg'\r\nimport Button from './Button';\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className=\"header\">\r\n        <div className=\"container\">\r\n          <Link to = \"/\">\r\n          <div className=\"header__logo\">\r\n            <img width=\"38\" src={logoSvg} alt=\"Pizza-logo\"/>\r\n            <div>\r\n              \r\n              <h1>React Pizza</h1>\r\n              <p>самая вкусная пицца во вселенной</p>\r\n            </div>\r\n          </div>\r\n          </Link>\r\n          \r\n          <div className=\"header__cart\">\r\n            <Link to=\"/cart\">\r\n            <Button className=\"button--cart\">\r\n            <span>520 ₽</span>\r\n              <div className=\"button__delimiter\"></div>\r\n              <svg\r\n                width=\"18\"\r\n                height=\"18\"\r\n                viewBox=\"0 0 18 18\"\r\n                fill=\"none\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  d=\"M6.33333 16.3333C7.06971 16.3333 7.66667 15.7364 7.66667 15C7.66667 14.2636 7.06971 13.6667 6.33333 13.6667C5.59695 13.6667 5 14.2636 5 15C5 15.7364 5.59695 16.3333 6.33333 16.3333Z\"\r\n                  stroke=\"white\"\r\n                  strokewith=\"1.8\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                />\r\n                <path\r\n                  d=\"M14.3333 16.3333C15.0697 16.3333 15.6667 15.7364 15.6667 15C15.6667 14.2636 15.0697 13.6667 14.3333 13.6667C13.597 13.6667 13 14.2636 13 15C13 15.7364 13.597 16.3333 14.3333 16.3333Z\"\r\n                  stroke=\"white\"\r\n                  strokewith=\"1.8\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                />\r\n                <path\r\n                  d=\"M4.78002 4.99999H16.3334L15.2134 10.5933C15.1524 10.9003 14.9854 11.176 14.7417 11.3722C14.4979 11.5684 14.1929 11.6727 13.88 11.6667H6.83335C6.50781 11.6694 6.1925 11.553 5.94689 11.3393C5.70128 11.1256 5.54233 10.8295 5.50002 10.5067L4.48669 2.82666C4.44466 2.50615 4.28764 2.21182 4.04482 1.99844C3.80201 1.78505 3.48994 1.66715 3.16669 1.66666H1.66669\"\r\n                  stroke=\"white\"\r\n                  strokewith=\"1.8\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                />\r\n              </svg>\r\n              <span>3</span>\r\n            </Button>\r\n            </Link>\r\n         \r\n             \r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\n// class Categories extends React.Component {\r\n\r\n//   state = {     //должна быть выбрана категория и её нужно где-то хранить. Для этого нужно состояние\r\n//     activeItem: 3,   //в классен создаётся состояние\r\n//   }\r\n\r\n\r\n//   onSelectItem = (index) => {\r\n//     this.setState({\r\n//       activeItem: index,         //с помощью setState меняем свойство\r\n//     });\r\n//     this.forceUpdate(); //это rerender этот метод оповещает React о том, что нужно производить обновление (при нажатии менять состояние)\r\n//   }\r\n\r\n\r\n//   render() {\r\n//     const {items, onClickItem} = this.props;\r\n//     return (\r\n//               <div>\r\n//                   <div className=\"categories\">\r\n//                     <ul>\r\n//                       <li>Все</li>\r\n//                       {items.map((name, index) => (\r\n//                         <li className={this.state.activeItem === index ? 'active' : ''}\r\n//                         onClick={()=>this.onSelectItem(index)}\r\n//                         key={`${name}_${index}`}>\r\n//                         {name}\r\n//                         </li>\r\n//                       ))}\r\n//                     </ul>\r\n//                   </div>\r\n//               </div>\r\n//           )\r\n//   }\r\n// }\r\n\r\nconst Categories = React.memo(function Categories({items, onClickItem}) {\r\n  \r\n  const [activeItem, setActiveItem] = React.useState(null);\r\n\r\n  const onSelectItem = (index) => {\r\n    setActiveItem(index);\r\n    onClickItem(index);\r\n  }\r\n\r\n  // const activeItem = state[0];\r\n  // const setActiveItem = state[1];\r\n\r\n\r\n  \r\n  return (\r\n      <div>\r\n          <div className=\"categories\">\r\n            <ul>\r\n              <li className = {activeItem === null ? 'active' : ''} onClick={()=>onSelectItem(null)}>Все</li>\r\n              {\r\n                  items && items.map((name, index) => (\r\n                  <li className = {activeItem === index ? 'active' : ''} \r\n                  onClick={()=> onSelectItem(index)}\r\n                  key={`${name}_$(index)`}>\r\n                  {name}\r\n                  </li>\r\n                  ))}\r\n            </ul>\r\n          </div>\r\n      </div>\r\n  )\r\n})\r\n\r\nexport default Categories;\r\n","import React from 'react'\r\n\r\nconst SortPopup = React.memo(function SortPopup({items}) { // React.memo - делает поверхностной сравнение, т.е смотрит, изменился ли items, если не измениося, не делает ререндер, и наоборот\r\n\r\n  const [visiblePopup, setVisiblePopup] = React.useState(false); //по умолчанию в функцию useState передаём значение false и оно перекидывается в переменную visiblePopup\r\n                                                                  //далее функция setVisiblePopup будет менять значение переменной visiblePopup на то, которое мы захотим, и оповестить реакт и сделать rerender\r\n  \r\n  const sortRef = React.useRef(); //при первой инициализации это хука, в sortRef будет null\r\n  //хук useRef сохраняет ссылки , например, на элементы DOM или что нибудь другое\r\n  //useRef нужен для того, чтобы всегда хранить актуальные значения\r\n\r\n  \r\n  const [activeItem, setActiveItem] = React.useState(1);\r\n\r\n  const activeLabel = items[activeItem].name;\r\n\r\n  const toggleVisiblePopup = () => {\r\n      setVisiblePopup(!visiblePopup);\r\n\r\n \r\n  }   \r\n\r\n  const handleOutsideClick = (e) => {  //функция, которая отлавливает клик вне\r\n      if (!e.path.includes(sortRef.current)){\r\n      setVisiblePopup(false);\r\n      \r\n      }\r\n  }\r\n\r\n\r\n  const onSelectItem = (index) => {\r\n      setActiveItem(index);\r\n      setVisiblePopup(false);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n      document.body.addEventListener('click', handleOutsideClick);\r\n      console.log(sortRef.current)\r\n  }, []);\r\n\r\n  // React.useEffect(() => {      // следит за событиями компонента (оповещает нас), контролирует, при каком действии вносить изменения\r\n  //     setTimeout(() => {\r\n  //         console.log(111);   //если компонент один раз отрендерился , вызови это действие и никогда больше его не вызывай\r\n  //     }, 500);\r\n  // }, []);      //[] - пустой массив означает, что нет никаких зависимостей\r\n  //              //[visiblePopup] - если есть зависимость и переменная изменится, то вызовется useEffect ,иначе он не вызовется\r\n\r\n  return (\r\n      <div ref={sortRef} className=\"sort\">  \r\n            <div className=\"sort__label\">\r\n              <svg\r\n                width=\"10\"\r\n                height=\"6\"\r\n                viewBox=\"0 0 10 6\"\r\n                fill=\"none\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  d=\"M10 5C10 5.16927 9.93815 5.31576 9.81445 5.43945C9.69075 5.56315 9.54427 5.625 9.375 5.625H0.625C0.455729 5.625 0.309245 5.56315 0.185547 5.43945C0.061849 5.31576 0 5.16927 0 5C0 4.83073 0.061849 4.68424 0.185547 4.56055L4.56055 0.185547C4.68424 0.061849 4.83073 0 5 0C5.16927 0 5.31576 0.061849 5.43945 0.185547L9.81445 4.56055C9.93815 4.68424 10 4.83073 10 5Z\"\r\n                  fill=\"#2C2C2C\"\r\n                />\r\n              </svg>\r\n              <b>Сортировка по:</b>\r\n              <span onClick={toggleVisiblePopup}>{activeLabel}</span>\r\n            </div>\r\n            {visiblePopup && (\r\n               <div className=\"sort__popup\"> \r\n              <ul>\r\n               {items && \r\n                  items.map((obj, index) => (\r\n                  <li \r\n                  onClick={() => onSelectItem(index)}\r\n                  className = {activeItem === index ? 'active' : ''} \r\n                  key={`${obj.type}_$(index)`}>\r\n                  {obj.name}\r\n                  </li>\r\n                  ))}\r\n              </ul>\r\n            </div>\r\n            )}\r\n            </div>\r\n  )\r\n})\r\n\r\nexport default SortPopup\r\n  ","import React from 'react'\r\nimport classNames from 'classnames';\r\nimport PropTypes from'prop-types';\r\n\r\nfunction PizzaBlock({name, imageUrl, price, types, sizes}) {\r\n\r\n    console.log(name, types);\r\n\r\n    const availableTypes = ['тонкое', 'традиционное'];\r\n\r\n    const availableSizes = [26,30,40];\r\n\r\n    const [activeType, setActiveType] = React.useState(types[0]);\r\n    const [activeSize, setActiveSize] = React.useState(sizes[0]);\r\n\r\n    const onSelectType = (index) => {\r\n      setActiveType(index);\r\n    }\r\n\r\n    const onSelectSize = (index) => {\r\n      setActiveSize(index);\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"pizza-block\">\r\n<img\r\nclassName=\"pizza-block__image\"\r\nsrc={imageUrl}\r\nalt=\"Pizza\"\r\n/>\r\n<h4 className=\"pizza-block__title\">{name}</h4>\r\n<div className=\"pizza-block__selector\">\r\n<ul>\r\n  {availableTypes.map((type, index) => ( \r\n<li \r\n  key={type}\r\n  onClick ={()=>onSelectType(index)} \r\n  className={classNames({\r\n    'active': activeType === index, //у нас есть объект, там есть ключ, который является классом. если он соотетствует , то применяется\r\n    'disabled': !types.includes(index), //проверяем есть ли индекс. если нет, ставь класс disabled\r\n  })}>\r\n     {type}\r\n</li>\r\n ))}\r\n</ul>\r\n<ul>\r\n{availableSizes.map((size, index) => ( \r\n<li \r\n  key={size}\r\n  onClick ={()=>onSelectSize(index)} \r\n  className={classNames({\r\n    'active': activeSize === index, //у нас есть объект, там есть ключ, который является классом. если он соотетствует , то применяется\r\n    'disabled': !sizes.includes(size), //проверяем есть ли индекс. если нет, ставь класс disabled\r\n  })}>\r\n     {size} см.\r\n</li>\r\n ))}\r\n</ul>\r\n</div>\r\n<div className=\"pizza-block__bottom\">\r\n<div className=\"pizza-block__price\">от {price} ₽</div>\r\n<div className=\"button button--outline button--add\">\r\n<svg\r\n width=\"12\"\r\n height=\"12\"\r\n viewBox=\"0 0 12 12\"\r\n fill=\"none\"\r\n xmlns=\"http://www.w3.org/2000/svg\"\r\n>\r\n <path\r\n   d=\"M10.8 4.8H7.2V1.2C7.2 0.5373 6.6627 0 6 0C5.3373 0 4.8 0.5373 4.8 1.2V4.8H1.2C0.5373 4.8 0 5.3373 0 6C0 6.6627 0.5373 7.2 1.2 7.2H4.8V10.8C4.8 11.4627 5.3373 12 6 12C6.6627 12 7.2 11.4627 7.2 10.8V7.2H10.8C11.4627 7.2 12 6.6627 12 6C12 5.3373 11.4627 4.8 10.8 4.8Z\"\r\n   fill=\"white\"\r\n />\r\n</svg>\r\n<span>Добавить</span>\r\n<i>2</i>\r\n</div>\r\n</div>\r\n</div> \r\n    )\r\n}\r\n\r\nPizzaBlock.propTypes = {\r\n      name: PropTypes.string.isRequired,\r\n      imageUrl: PropTypes.string.isRequired,\r\n      price: PropTypes.number.isRequired,\r\n      types: PropTypes.arrayOf(PropTypes.number).isRequired, //если в types есть массив, то ок. если это массив чисел, то всё будет нормально работать\r\n      sizes: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    };\r\n\r\n//добавляем типизацию\r\nPizzaBlock.defaultProps = { //если types не был передан, то ошибки не будет\r\n  name: '---',\r\n  price: 0,\r\n  types: [],\r\n  sizes: [],\r\n}\r\n\r\nexport default PizzaBlock\r\n","import React from 'react'\r\nimport {  Categories, SortPopup, PizzaBlock } from '../components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {setCategory} from '../redux/actions/filters'\r\n\r\nconst categoryNames = ['Мясные', 'Вегетарианские', 'Гриль', 'Острые'];\r\nconst sortItems = [\r\n  {name:'популярности', type: 'popular'},\r\n  {name:'цене', type: 'price'},\r\n  {name:'алфавит', type:'alphabet'}\r\n];\r\n\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(({ pizzas}) => pizzas.items);\r\n\r\n  const onSelectCategory = React.useCallback((index) => { //один раз при первом render запомним ссылку и больше не будем её менять\r\n    dispatch(setCategory(index)); //это делаем для того, чтобы не происходил rerender 2 раза //\r\n  }, []);\r\n  \r\n   //вытащи из первого параметра pizzas и filters\r\n  //   return {\r\n  //     // items: pizzas.items, //верни мне items, который хранится в pizzas.items\r\n  //     // sortBy: filters.sortBy, //и sortBy, который хранится в фильтрах sortBy\r\n  //   }\r\n  // }); //useSelector получает функцию\r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n      <div className=\"container\">\r\n   <div className=\"content__top\">\r\n    <Categories \r\n         onClickItem={onSelectCategory}\r\n         items = {categoryNames}/>\r\n     <SortPopup items={\r\n            sortItems\r\n       }/>\r\n   </div>\r\n   <h2 className=\"content__title\">Все пиццы</h2>\r\n   <div className=\"content__items\">\r\n     {\r\n       items && items.map((obj)=>\r\n       <PizzaBlock key = {obj.id} {...obj} />) //каждый объект, который есть в массиве, передаётся сюда //...obj значит, что все свойства, которые есть в массиве буду передаваться в этот компонент\r\n     }                                          \r\n     {/* <PizzaBlock /> */}\r\n</div>\r\n</div>\r\n </div>\r\n         \r\n       \r\n      \r\n    )\r\n}\r\n\r\nexport default Home;\r\n","//здесь функции, связанные с фильтрацией\r\n\r\nexport const setSortBy = (name) => ({  //функция action-creator\r\n   type: 'SET_SORT_BY',\r\n   payload: name,\r\n});   \r\n\r\nexport const setCategory = (catIndex) => ({  //функция action-creator\r\n    type: 'SET_CATEGORY',\r\n    payload: catIndex,\r\n });  ","import React from 'react'\r\n\r\nfunction Cart() {\r\n    return (\r\n        <div>\r\n            <h1>Корзина</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\n\nimport {fetchPizzas, setPizzas} from './redux/actions/pizzas';\nimport { Header } from './components';\nimport {Home, Cart} from './pages';\nimport {Route} from 'react-router-dom';\n\n\nfunction App () {\n\n  const dispatch = useDispatch();\n\n  React.useEffect(()=> {     //когда произойдет первый рендер ->\n        dispatch(fetchPizzas()); //выполняем fetchPizzas как асинхронныйы action\n    }, []);                                  \n \n\n  return (\n    <div>\n      <div className=\"wrapper\">\n     <Header/>\n     {/* <Button outline>Кнопка</Button>\n     <Button onClick={clickPoKnopke}>123</Button> */}\n     <div className=\"content\">\n   <Route path=\"/\" component={Home} exact />\n       <Route path=\"/cart\" component={Cart} exact />\n     </div>\n   </div>\n    </div>\n\n  );\n}\n\nexport default App;\n\n// class App extends React.Component {\n\n//   // componentDidMount() {   //здесь говорим, что когда произойдет первый рендер компонента, вызывай axios, обращайся к запросу и передай куда-то данные\n//   //   axios.get('http://localhost:3000/db.json').then(({data})=> {\n//   //            this.props.setPizzas(data.pizzas);\n//   //            });\n//   // }\n\n//       render() {\n//       }\n\n// }\n\n// const mapStatetoProps = state => { //взять state и поместить его в props \n//  return {               //затем state вытаскивает из хранилища то, что нам нужно\n//     items: state.pizzas.items    //вытаскиваем pizzas и items и передаём свойства items\n//  }\n// }\n// //затем connect берет все пропсы из App , берет объект (возвращаемый функцией mapStatetoProps)\n// //объединит его в один пропс и будет использовать там, где нужно \n\n// const mapDispatchToProps = dispatch => { //пропихивает в пропс компонента action-creators и вызывать их как функции\n//   return {\n//     setPizzas: (items) => dispatch(setPizzasAction(items)),\n   \n//   }\n// }\n\n\n// export default connect(mapStatetoProps, mapDispatchToProps)(App); //объясняем, что теперь компонент должен понимать redux (следить за хранилищем)\n//               //connect имеет 2 функции : actions и состояния (то, что нужно вытащить из хранилища)\n//               //connect возвращает в пропсах dispatch\n","//здесь будем хранить сортировку и категории\r\n//здесь функции, связанные с фильтрацией\r\nconst initialState = {\r\n    categories: 0,\r\n    sortBy: 'popular',\r\n};\r\n\r\n\r\nconst filters = (state = initialState, action) => { //это reducer для redux\r\n\r\n    if (action.type === 'SET_SORT_BY') {\r\n        return {\r\n            ...state,\r\n            sortBy: action.payload,\r\n        }\r\n    }\r\n    if (action.type === 'SET_CATEGORY') {\r\n    return {\r\n        ...state,\r\n        category: action.payload,\r\n    }\r\n}\r\nreturn state;\r\n};\r\n\r\n\r\nexport default filters;","const initialState = {\r\n    items: [],\r\n    isLoaded: false,   //false - когда при первом запуске пиццы ещё не загрузились\r\n};\r\n\r\n\r\nconst pizzas = (state = initialState, action) => { //это reducer для redux\r\n\r\n    if (action.type === 'SET_PIZZAS') { //если придёт SET_PIZZAS, возьми старые данные из state\r\n        return {                        //замени items и верни новый state\r\n            ...state,\r\n            items: action.payload,\r\n            isLoaded: true,   //когда пиццы уже загрузились\r\n        }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default pizzas;","import filtersReducer from './filters';\r\nimport pizzasReducer from './pizzas';\r\nimport { combineReducers } from 'redux';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    filters: filtersReducer,\r\n    pizzas: pizzasReducer,\r\n  });\r\n  \r\nexport default rootReducer;","import { createStore, compose,  applyMiddleware  } from 'redux';\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,  \r\n    composeEnhancers(rootReducer, composeEnhancers(applyMiddleware(thunk))) // эта функция будет выполнять несколько функций\r\n); //у createStore всегда должен быть reducer\r\n// applyMiddleware означает, что нужно взять функции посредники и использовать их в каждом экшене\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/app.scss';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Header from './components/Header'\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nconst inc = () => {\n  store.dispatch({\n    type:'ADD'\n  });\n}\n\nstore.subscribe(()=> {\n  console.log('changed!', store.getState());\n})\n\nReactDOM.render(\n    <Router>\n      <Provider store={store}>\n      <button onClick={inc}>+1</button>\n    <App />\n    {/* <Route exact path = \"/\" component={App} /> \n    <Route exact path = \"/qwe\" component={Header} />  */}\n    {/* </BrowserRouter> */}\n    </Provider>\n    </Router>,\n  // \n  document.getElementById('root'),\n);\n\nconsole.log(store.getState());\n\n"],"sourceRoot":""}